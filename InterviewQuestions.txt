1. Usefulness of CPU stack

Stack is a list of data words.
A register stores address of top most element (stack pointer).
Push and pop are the two primary operations performed on a stack.
Push: inserts one operand at the top of stack and decreases SP register.
Pop: deletes one operand from the top of stack and increases SP register.

Advantages of Stack Based CPU Organization:
-Temporary storage of variables 
-Return address from a subroutine
-Efficient computation of complex expressions
-Allocation of location variables for a subroutine
-Executes instructions fast due to help from registers
-Saves information and restores after interrupts (don't lose work)

The Minimal Stack: 
-Array for storing values 
-Pointer to top element (SP)
-Push and pop instructions

Pushing from Stack:
Decrement SP, store value via register into RAM at SP address

Popping from Stack:
Retrieve value from RAM at SP address, store into register, increment SP

2. Functionality of the ALU

Arithmetic logic unit is a digital circuit used to perform math/logic operations.
It represents the funamental building block of central processing unit (CPU).
Loads data from input registers (storage devices) that can be accessed fast.
Control unit tells ALU what operation to perform, stores to output register.

3. Convert 8-bit binary to hex

Three Common Types of Numbers:
Decimal -- 10 digits -- 12
Binary -- 2 digits -- 0b1100
Hex -- 16 digits -- 0xC (0-9 + A-F)

To convert 8-bit binary to hex:
1) First cut the binary number in half.
2) Ignore the 0's, find binary associated with 1.
3) Add the totals of each chunk and convert to hex.

1011 0111
8 21  421
11    7
B     7
B7

1101 0101
84 1  4 1

13     5
D5

0010 1110 1010

  2  842  8 2
  2  14   10
  2  E    A
  2EA

RAM = Random Access Memory
-Fast compared to hard drives
-Like an array of bytes you can access by index
-Each element in RAM can store a byte (8-bit number)
-Larger, multi-byte numbers stored in sequential addresses
-CPU communicates with RAM via the memory bus
-CPU Words: larger 64-bit (8-byte) numbers on which CPU operates

CPU Registers:
-Store words to be accessed at high speeds
-Like variables the CPU has at its disposal
-Fixed names depending on your CPU
-Can only do math on registers loaded from RAM in some cases

CPU Instructions:
-Actually just numbers
-Stores address of command currently execution in RAM
- ^ this is held on a special register called program counter (PC)
-CPU's usually have 50-200 instructions

CPU Clock:
-Triggers a few billion times per second
-Measured in Hz, KHz, MHz, or GHz (billion byes/second)
-Each instruction takes one or more clock cycles to Executes
-Faster the clock, the more instructions executed per second

Concurrency and Parallelism:
-How CPU does more than one thing at a times
-Duplicate hardware components to double their output
-Can also use a multi-core CPU where every core shares RAM

Cache:
-Middle ground between RAM (slow) and Registers (fast)
-Cache hit means the data was stored in memory, miss = wasn't

Common sizes of computer bus: 4/8/12/16/24/32/64/80/96/128 bits

Pins = wires sticking out of a CPU chip that form electrical connection between PC and outside world

Moore's Law: number of transistors (switch to turn on electronic power) double every 2 years

Counting in Binary:
0001
0010
0011
0100
0101
0110
0111

Splitting a binary number in two creates "nibble" to be used in hex conversions

The count of a number always remains the same no matter which base we use to write it

Truth Column (True/False)
A                not A
0                  1
1                  0

XOR = only true if one or the other fits (not both)

Interrupts:
-Caused by peripherals (devices attached to motherboard, not part of CPU)
-Alert CPU that work needs to be done, i.e. key pressed and event to handle
-Current state of processor is saved to stack and execution continues at address of handler
-After being handled, processor state is popped off the stack and execution resumes as it was

Interrupt Vector Table:
-Way to lookup, like an array of pointers to handlers 
-Different CPU's store this stuff in varying areas of RAM

Subroutines:
-Like functions without ability to add arguments or return output
-CPU can push address of next instruction, move to subroutine address
-Then it returns (exits) from said subroutine; put another way, pop value from top of stack